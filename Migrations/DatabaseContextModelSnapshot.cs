// <auto-generated />
using System;
using Colomb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Colomb.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Colomb.Data.Compte", b =>
                {
                    b.Property<int>("CompteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroSiret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VisibiliteReviews")
                        .HasColumnType("bit");

                    b.Property<bool>("estValide")
                        .HasColumnType("bit");

                    b.HasKey("CompteId");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("Colomb.Data.Evenement", b =>
                {
                    b.Property<int>("EvenementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Categorie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstSignale")
                        .HasColumnType("bit");

                    b.Property<bool>("EstSuspendu")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HeureFermeture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HeureOuverture")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NombreLikes")
                        .HasColumnType("int");

                    b.Property<int>("NombrePersMax")
                        .HasColumnType("int");

                    b.Property<int>("NombreVues")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.HasKey("EvenementId");

                    b.HasIndex("CompteId");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("Colomb.Data.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompteId")
                        .HasColumnType("int");

                    b.Property<string>("Contenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EstSignale")
                        .HasColumnType("bit");

                    b.Property<int?>("EvenementId")
                        .HasColumnType("int");

                    b.Property<int>("NombreEtoiles")
                        .HasColumnType("int");

                    b.Property<int>("NombreLikes")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("CompteId");

                    b.HasIndex("EvenementId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CompteEvenement", b =>
                {
                    b.Property<int>("ComptesEvenementsLikedCompteId")
                        .HasColumnType("int");

                    b.Property<int>("EvenementsLikedEvenementId")
                        .HasColumnType("int");

                    b.HasKey("ComptesEvenementsLikedCompteId", "EvenementsLikedEvenementId");

                    b.HasIndex("EvenementsLikedEvenementId");

                    b.ToTable("CompteEvenement");
                });

            modelBuilder.Entity("CompteReview", b =>
                {
                    b.Property<int>("ComptesReviewsLikedCompteId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewsLikedReviewId")
                        .HasColumnType("int");

                    b.HasKey("ComptesReviewsLikedCompteId", "ReviewsLikedReviewId");

                    b.HasIndex("ReviewsLikedReviewId");

                    b.ToTable("CompteReview");
                });

            modelBuilder.Entity("Colomb.Data.Evenement", b =>
                {
                    b.HasOne("Colomb.Data.Compte", "Compte")
                        .WithMany("EvenementsCrees")
                        .HasForeignKey("CompteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Compte");
                });

            modelBuilder.Entity("Colomb.Data.Review", b =>
                {
                    b.HasOne("Colomb.Data.Compte", "Compte")
                        .WithMany("Reviews")
                        .HasForeignKey("CompteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Colomb.Data.Evenement", "Evenement")
                        .WithMany("Reviews")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Compte");

                    b.Navigation("Evenement");
                });

            modelBuilder.Entity("CompteEvenement", b =>
                {
                    b.HasOne("Colomb.Data.Compte", null)
                        .WithMany()
                        .HasForeignKey("ComptesEvenementsLikedCompteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Colomb.Data.Evenement", null)
                        .WithMany()
                        .HasForeignKey("EvenementsLikedEvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompteReview", b =>
                {
                    b.HasOne("Colomb.Data.Compte", null)
                        .WithMany()
                        .HasForeignKey("ComptesReviewsLikedCompteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Colomb.Data.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsLikedReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Colomb.Data.Compte", b =>
                {
                    b.Navigation("EvenementsCrees");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Colomb.Data.Evenement", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
