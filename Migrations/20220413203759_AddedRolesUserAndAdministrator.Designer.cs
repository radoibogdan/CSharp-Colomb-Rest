// <auto-generated />
using System;
using Colomb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Colomb.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220413203759_AddedRolesUserAndAdministrator")]
    partial class AddedRolesUserAndAdministrator
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Colomb.Data.Compte", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NumeroSiret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("VisibiliteReviews")
                        .HasColumnType("bit");

                    b.Property<bool>("estValide")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Adresse = "40 rue de Compte",
                            ConcurrencyStamp = "2ecf4b3e-0db8-4199-b9e8-6d4a32902650",
                            DOB = new DateTime(1988, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            Email = "bogdan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Nom = "Radoi",
                            PasswordHash = "bogdan",
                            PhoneNumberConfirmed = false,
                            Photo = "chemin/photo_compte_profil",
                            Prenom = "Bogdan",
                            Role = "ROLE_USER",
                            SecurityStamp = "9cd43ba9-611b-42d4-b6a4-6ed069c87886",
                            TwoFactorEnabled = false,
                            UserName = "bogdan",
                            VisibiliteReviews = true,
                            estValide = true
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Adresse = "40 rue de Paris",
                            ConcurrencyStamp = "2521680d-d11f-4d9a-acfe-e03b5fb5d4fe",
                            DOB = new DateTime(1992, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            Email = "wally@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Nom = "Cisse",
                            PasswordHash = "wally",
                            PhoneNumberConfirmed = false,
                            Photo = "dossier/photo",
                            Prenom = "Wally",
                            Role = "ROLE_USER",
                            SecurityStamp = "fff7c791-b526-483a-b771-9d27636d66f3",
                            TwoFactorEnabled = false,
                            UserName = "wally",
                            VisibiliteReviews = true,
                            estValide = true
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Adresse = "40 rue de Paris",
                            ConcurrencyStamp = "1da0af21-fac5-4bce-934c-3b796be0a0bc",
                            DOB = new DateTime(1990, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description",
                            Email = "daria@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Nom = "Rychkova",
                            PasswordHash = "Daria",
                            PhoneNumberConfirmed = false,
                            Photo = "dossier/photo",
                            Prenom = "daria",
                            Role = "ROLE_USER",
                            SecurityStamp = "557bfcd7-4337-4d40-a84b-facdf2445c43",
                            TwoFactorEnabled = false,
                            UserName = "daria",
                            VisibiliteReviews = true,
                            estValide = true
                        });
                });

            modelBuilder.Entity("Colomb.Data.Evenement", b =>
                {
                    b.Property<int>("EvenementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Categorie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompteId")
                        .HasColumnType("int");

                    b.Property<string>("CompteId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstSignale")
                        .HasColumnType("bit");

                    b.Property<bool>("EstSuspendu")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HeureFermeture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HeureOuverture")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NombreLikes")
                        .HasColumnType("int");

                    b.Property<int>("NombrePersMax")
                        .HasColumnType("int");

                    b.Property<int>("NombreVues")
                        .HasColumnType("int");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.HasKey("EvenementId");

                    b.HasIndex("CompteId1");

                    b.ToTable("Evenements");

                    b.HasData(
                        new
                        {
                            EvenementId = 1,
                            Adresse = "40 rue de Evenement",
                            Categorie = "musee",
                            CompteId = 1,
                            Date = new DateTime(2022, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description evenement",
                            EstSignale = false,
                            EstSuspendu = false,
                            HeureFermeture = new DateTime(2022, 5, 20, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            HeureOuverture = new DateTime(2022, 5, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 22.219999999999999,
                            Longitude = 40.219999999999999,
                            Nom = "Evenement Comedie",
                            NombreLikes = 2,
                            NombrePersMax = 50,
                            NombreVues = 40,
                            Photo = "chemin/photo_evenement",
                            Prix = 40f
                        },
                        new
                        {
                            EvenementId = 2,
                            Adresse = "40 rue de Evenement",
                            Categorie = "theatre",
                            CompteId = 2,
                            Date = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description evenement",
                            EstSignale = false,
                            EstSuspendu = false,
                            HeureFermeture = new DateTime(2022, 6, 15, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            HeureOuverture = new DateTime(2022, 6, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 11.220000000000001,
                            Longitude = 55.219999999999999,
                            Nom = "Evenement dehors",
                            NombreLikes = 440,
                            NombrePersMax = 20,
                            NombreVues = 140,
                            Photo = "chemin/photo_evenement",
                            Prix = 300f
                        },
                        new
                        {
                            EvenementId = 3,
                            Adresse = "40 rue de Evenement",
                            Categorie = "spectacle",
                            CompteId = 1,
                            Date = new DateTime(2022, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description evenement",
                            EstSignale = false,
                            EstSuspendu = false,
                            HeureFermeture = new DateTime(2022, 2, 10, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            HeureOuverture = new DateTime(2022, 2, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Latitude = 122.22,
                            Longitude = 140.22,
                            Nom = "Evenement Parc",
                            NombreLikes = 112,
                            NombrePersMax = 250,
                            NombreVues = 140,
                            Photo = "chemin/photo_evenement",
                            Prix = 146f
                        });
                });

            modelBuilder.Entity("Colomb.Data.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompteId")
                        .HasColumnType("int");

                    b.Property<string>("CompteId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Contenu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EstSignale")
                        .HasColumnType("bit");

                    b.Property<int?>("EvenementId")
                        .HasColumnType("int");

                    b.Property<int>("NombreEtoiles")
                        .HasColumnType("int");

                    b.Property<int>("NombreLikes")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("CompteId1");

                    b.HasIndex("EvenementId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            CompteId = 2,
                            Contenu = "Sympa mais pas plus, je veux veux un remboursement",
                            Date = new DateTime(2022, 12, 31, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EstSignale = true,
                            EvenementId = 3,
                            NombreEtoiles = 2,
                            NombreLikes = 2
                        },
                        new
                        {
                            ReviewId = 2,
                            CompteId = 3,
                            Contenu = "Tres bien",
                            Date = new DateTime(2022, 3, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EstSignale = false,
                            EvenementId = 2,
                            NombreEtoiles = 5,
                            NombreLikes = 1
                        },
                        new
                        {
                            ReviewId = 3,
                            CompteId = 1,
                            Contenu = "Bref, je reviendrai pas",
                            Date = new DateTime(2022, 2, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EstSignale = false,
                            EvenementId = 1,
                            NombreEtoiles = 1,
                            NombreLikes = 0
                        },
                        new
                        {
                            ReviewId = 4,
                            CompteId = 2,
                            Contenu = "Ingenieux et spectaculaire",
                            Date = new DateTime(2022, 5, 17, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EstSignale = false,
                            EvenementId = 3,
                            NombreEtoiles = 3,
                            NombreLikes = 11
                        },
                        new
                        {
                            ReviewId = 5,
                            CompteId = 1,
                            Contenu = "Moyen mais pas cher, je ne recommande pas",
                            Date = new DateTime(2022, 9, 19, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EstSignale = false,
                            EvenementId = 3,
                            NombreEtoiles = 2,
                            NombreLikes = 22
                        });
                });

            modelBuilder.Entity("CompteEvenement", b =>
                {
                    b.Property<string>("ComptesEvenementsLikedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EvenementsLikedEvenementId")
                        .HasColumnType("int");

                    b.HasKey("ComptesEvenementsLikedId", "EvenementsLikedEvenementId");

                    b.HasIndex("EvenementsLikedEvenementId");

                    b.ToTable("CompteEvenement");

                    b.HasData(
                        new
                        {
                            ComptesEvenementsLikedId = "1",
                            EvenementsLikedEvenementId = 3
                        },
                        new
                        {
                            ComptesEvenementsLikedId = "2",
                            EvenementsLikedEvenementId = 3
                        },
                        new
                        {
                            ComptesEvenementsLikedId = "2",
                            EvenementsLikedEvenementId = 1
                        },
                        new
                        {
                            ComptesEvenementsLikedId = "3",
                            EvenementsLikedEvenementId = 2
                        },
                        new
                        {
                            ComptesEvenementsLikedId = "3",
                            EvenementsLikedEvenementId = 1
                        },
                        new
                        {
                            ComptesEvenementsLikedId = "3",
                            EvenementsLikedEvenementId = 3
                        });
                });

            modelBuilder.Entity("CompteReview", b =>
                {
                    b.Property<string>("ComptesReviewsLikedId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReviewsLikedReviewId")
                        .HasColumnType("int");

                    b.HasKey("ComptesReviewsLikedId", "ReviewsLikedReviewId");

                    b.HasIndex("ReviewsLikedReviewId");

                    b.ToTable("CompteReview");

                    b.HasData(
                        new
                        {
                            ComptesReviewsLikedId = "1",
                            ReviewsLikedReviewId = 5
                        },
                        new
                        {
                            ComptesReviewsLikedId = "2",
                            ReviewsLikedReviewId = 1
                        },
                        new
                        {
                            ComptesReviewsLikedId = "2",
                            ReviewsLikedReviewId = 2
                        },
                        new
                        {
                            ComptesReviewsLikedId = "2",
                            ReviewsLikedReviewId = 3
                        },
                        new
                        {
                            ComptesReviewsLikedId = "2",
                            ReviewsLikedReviewId = 4
                        },
                        new
                        {
                            ComptesReviewsLikedId = "3",
                            ReviewsLikedReviewId = 1
                        },
                        new
                        {
                            ComptesReviewsLikedId = "3",
                            ReviewsLikedReviewId = 2
                        },
                        new
                        {
                            ComptesReviewsLikedId = "3",
                            ReviewsLikedReviewId = 3
                        },
                        new
                        {
                            ComptesReviewsLikedId = "3",
                            ReviewsLikedReviewId = 4
                        },
                        new
                        {
                            ComptesReviewsLikedId = "3",
                            ReviewsLikedReviewId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0dfa321e-4c90-47fa-9a9f-4a34cb3e1e2a",
                            ConcurrencyStamp = "3caf7511-4734-4b39-a8ed-4f2bce922e80",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "ee0785df-97af-4508-a8ce-ee372fe21c78",
                            ConcurrencyStamp = "49ec1768-f071-4c01-b2ec-63b4d88612d0",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Colomb.Data.Evenement", b =>
                {
                    b.HasOne("Colomb.Data.Compte", "Compte")
                        .WithMany("EvenementsCrees")
                        .HasForeignKey("CompteId1")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Compte");
                });

            modelBuilder.Entity("Colomb.Data.Review", b =>
                {
                    b.HasOne("Colomb.Data.Compte", "Compte")
                        .WithMany("Reviews")
                        .HasForeignKey("CompteId1")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Colomb.Data.Evenement", "Evenement")
                        .WithMany("Reviews")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Compte");

                    b.Navigation("Evenement");
                });

            modelBuilder.Entity("CompteEvenement", b =>
                {
                    b.HasOne("Colomb.Data.Compte", null)
                        .WithMany()
                        .HasForeignKey("ComptesEvenementsLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Colomb.Data.Evenement", null)
                        .WithMany()
                        .HasForeignKey("EvenementsLikedEvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompteReview", b =>
                {
                    b.HasOne("Colomb.Data.Compte", null)
                        .WithMany()
                        .HasForeignKey("ComptesReviewsLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Colomb.Data.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsLikedReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Colomb.Data.Compte", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Colomb.Data.Compte", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Colomb.Data.Compte", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Colomb.Data.Compte", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Colomb.Data.Compte", b =>
                {
                    b.Navigation("EvenementsCrees");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Colomb.Data.Evenement", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
